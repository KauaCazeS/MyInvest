// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model AccountTypes {
  id    Int     @id @default(autoincrement())
  type  String  @unique @default("email")
  Users Users[]

  @@map(name: "account_types")
}

model Users {
  id        Int    @id @default(autoincrement())
  firstName String @map("first_name")
  lastName  String @map("last_name")

  accountType Int?          @default(1) @map("account_type")
  Type        AccountTypes? @relation(fields: [accountType], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  UserPassword UsersPassword[]
  UserEmail    UserEmails[]
  UserAssets   UserAssets[]
  PriceAssetsWatch   PriceAssetsWatch[]
}

model UsersPassword {
  id       Int    @id @default(autoincrement())
  password String @db.VarChar(255)
  userId   Int
  users    Users  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "users_password")
}

model UserEmails {
  id     Int    @id @default(autoincrement())
  email  String
  userId Int
  users  Users  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "user_emails")
}

model AssetTypes {
  id   Int    @id @default(autoincrement())
  name String @unique @default("Ação")

  Assets Assets[]

  @@map(name: "asset_types")
}

model Assets {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  type       Int?        @default(1)
  AssetTypes AssetTypes? @relation(fields: [type], references: [id], onDelete: SetNull)

  AssetDetailList AssetDetailsList[]
  UserAssets      UserAssets[]
}

model AssetDetailsList {
  id      Int @id @default(autoincrement())
  assetId Int @unique

  symbols             String @db.Text
  currentPrice     String @db.Text
  historicalDividends String @db.Text

  assets Assets @relation(fields: [assetId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  PriceAssetsWatch PriceAssetsWatch[]

  @@map("asset_details_list")
}

model UserAssets {
  id      Int @id @default(autoincrement())
  userId  Int
  assetId Int

  users Users @relation(fields: [userId], references: [id], onDelete: Cascade)

  assets Assets @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@map(name: "user_assets")
}

model PriceAssetsWatch {
  id            Int      @id @default(autoincrement())
  userId        Int
  assetId       Int
  expectedPrice String @db.Text
  active     Boolean  @default(true)

  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  users  Users            @relation(fields: [userId], references: [id], onDelete: Cascade)
  assets AssetDetailsList @relation(fields: [assetId], references: [assetId], onDelete: Cascade)

  @@map(name: "asset_emails_watch")
}
